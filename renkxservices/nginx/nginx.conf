
user  nginx;

#启动进程,通常设置成和cpu的数量相等
worker_processes  auto;

#配置Nginx worker进程最大打开文件数
worker_rlimit_nofile 65535;

#全局错误日志及PID文件
pid        /var/run/nginx.pid;
error_log  /var/log/nginx/nginx.error.log warn;

#工作模式及连接数上限
events {
    #epoll是多路复用IO(I/O Multiplexing)中的一种方式,
    #仅用于linux2.6以上内核,可以大大提高nginx的性能
    use epoll;
    #单个后台worker process进程的最大并发链接数
    worker_connections  51200;
}

http {
    #设定mime类型,类型由mime.type文件定义
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    #设定日志格式
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /dev/null;
    #access_log  /var/log/dnmp/nginx.access.log  main;

    # 隐藏版本号
    server_tokens  off;
    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，
    #对于普通应用，必须设为 on,
    #如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，
    #以平衡磁盘与网络I/O处理速度，降低系统的uptime.
    sendfile        on;
    #tcp_nopush     on;

    #保存服务器名字的hash表是由指令 server_names_hash_max_size 和 server_names_hash_bucket_size所控制的
    server_names_hash_bucket_size 512;
    #client_header_buffer_size 为请求头分配一个缓冲区。 如果请求头大小大于指定的缓冲区，
    #则使用large_client_header_buffers指令分配更大的缓冲区
    client_header_buffer_size 32k;
    #规定了用于读取大型客户端请求头的缓冲区的最大数量和大小
    large_client_header_buffers 4 32k;
    #设置NGINX能处理的最大请求主体大小。 如果请求大于指定的大小，则NGINX发回HTTP 413（Request Entity too large）错误。
    #如果服务器处理大文件上传，则该指令非常重要
    client_max_body_size 1024m;

    #连接超时时间
    keepalive_timeout  120;
    #fastcgi连接超时时间，默认60秒
    fastcgi_connect_timeout 300;
    #nginx 进程向 fastcgi 进程发送请求过程的超时时间，默认值60秒
    fastcgi_send_timeout 300;
    #fastcgi 进程向 nginx 进程发送输出过程的超时时间，默认值60秒
    fastcgi_read_timeout 300;

    #gzip  on;

    #用于指定读取FastCGI应答第一部分需要用多大的缓冲区，这个值表示将使用1个128KB的缓冲区读取应答的第一部分（应答头），
    #可以设置为fastcgi_buffers选项指定的缓冲区大小。
    fastcgi_buffer_size 128k;
    #指定本地需要用多少和多大的缓冲区来缓冲FastCGI的应答请求。
    #如果一个PHP脚本所产生的页面大小为256KB，那么会为其分配4个64KB的缓冲区来缓存；
    #如果页面大小大于256KB，那么大于256KB的部分会缓存到fastcgi_temp指定的路径中，但是这并不是好方法，因为内存中的数据处理速度要快于硬盘。
    #一般这个值应该为站点中PHP脚本所产生的页面大小的中间值，如果站点大部分脚本所产生的页面大小为256KB，那么可以把这个值设置为“16 16k”、“4 64k”等。
    fastcgi_buffers 32 32k;
    #默认值是fastcgi_buffers的两倍
    fastcgi_busy_buffers_size 128k;
    #表示在写入缓存文件时使用多大的数据块，默认值是fastcgi_buffers的两倍
    fastcgi_temp_file_write_size 128k;

    #map指令的作用：
    #根据客户端请求中$http_upgrade 的值，来构造改变$connection_upgrade的值
    #即根据变量$http_upgrade的值创建新的变量$connection_upgrade，
    #创建的规则就是{}里面的东西。其中的规则没有做匹配，因此使用默认的.
    #即 $connection_upgrade 的值会一直是 upgrade。然后如果 $http_upgrade为空字符串的话，
    #那值会是 close。
    #进行特殊的配置才能支持websocket
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/conf.d/*-/*.conf;
}
